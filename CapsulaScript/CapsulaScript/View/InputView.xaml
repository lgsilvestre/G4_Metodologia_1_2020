<UserControl x:Class="CapsulaScript.View.InputView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:CapsulaScript.View"
             xmlns:vm="clr-namespace:CapsulaScript.ViewModel"
             xmlns:valrules="clr-namespace:CapsulaScript.Validators"
    mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <UserControl.DataContext>
        <vm:InputViewModel/>
    </UserControl.DataContext>
    <UserControl.Resources>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
        <Style x:Key="Estiloboton" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" CornerRadius="8" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="14.761,4.306,15.028,6.173" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RenderTransformOrigin="0.305,0.783" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground"  TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="estilobotonredondo" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" CornerRadius="30" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="13.55,-0.25,-0.95,12.29" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Width="15.4"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="TextBox.Static.Border" Color="#FFABAdB3"/>
        <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FF7EB4EA"/>
        <SolidColorBrush x:Key="TextBox.Focus.Border" Color="#FF569DE5"/>
        <Style x:Key="formatotextbox1" TargetType="{x:Type TextBox}">
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
            <Setter Property="BorderBrush" Value="{StaticResource TextBox.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="AllowDrop" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border x:Name="border" CornerRadius="8" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Focus.Border}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                        <Condition Property="IsSelectionActive" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>
    </UserControl.Resources>
    <DockPanel>
        <DockPanel DockPanel.Dock="Top" Background="#144b93">
            <DockPanel DockPanel.Dock="Top" Margin="20, 10, 20, 16">
                <TextBlock Text="Expresiones:" DockPanel.Dock="Left" Margin="10, 0, 10, 0" Foreground="White"/>
                <TextBox DockPanel.Dock="Left" Style="{DynamicResource formatotextbox1}">
                    <TextBox.Text>
                        <Binding Path="Expresion" UpdateSourceTrigger="PropertyChanged">
                            <Binding.ValidationRules>
                                <valrules:InputExpressionValidator/>
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                    <Validation.ErrorTemplate>
                        <ControlTemplate>
                            <StackPanel>
                                <AdornedElementPlaceholder x:Name="textBox"/>
                                <Border BorderThickness="4" BorderBrush="#fd7200" Background="#fd7200" CornerRadius="8">
                                    <TextBlock Text="{Binding /ErrorContent}" Foreground="Black" Background="#fd7200" />
                                </Border>
                            </StackPanel>
                        </ControlTemplate>
                    </Validation.ErrorTemplate>
                </TextBox>
            </DockPanel>
            
            <DockPanel DockPanel.Dock="Top" Margin="20, 10, 20, 21">
                <TextBlock Text="Símbolos:" DockPanel.Dock="Left" Margin="10, 0, 10, 0" Foreground="White" VerticalAlignment="Center"/>

                <Button MouseRightButtonUp="Button_MouseRightButtonUp" PreviewMouseLeftButtonDown="Button_MouseLeftButtonDown" Content="-" DockPanel.Dock="Left" 
                VerticalAlignment="Center"  HorizontalAlignment="Left"
                RenderTransformOrigin="0.5,0.5" UseLayoutRounding="False" Style="{DynamicResource Estiloboton}" 
                Foreground="White" Background="#2E99F7" BorderBrush="#2E99F7">
                    <Button.ContextMenu>
                        <ContextMenu>
                            <MenuItem Foreground="White" Background="#2E99F7" Header="Abre comilla baja" Icon="   «" Click="Menu_item1" />
                            <MenuItem Foreground="White" Background="#2E99F7" Header="Cierra comilla baja" Icon="   »" Click="Menu_item2" />
                            <MenuItem Foreground="White" Background="#2E99F7" Header="Abre comilla alta" Icon="   “" Click="Menu_item3" />
                            <MenuItem Foreground="White" Background="#2E99F7" Header="Cierra comilla alta" Icon="   ”" Click="Menu_item4" />
                            <MenuItem Foreground="White" Background="#2E99F7" Header="Abre comilla simple" Icon="   '" Click="Menu_item5"/>
                            <MenuItem Foreground="White" Background="#2E99F7" Header="Cierra comilla simple" Icon="   '" Click="Menu_item6" />
                            <MenuItem Foreground="White" Background="#2E99F7" Header="Tres puntos" Icon="  ..." Click="Menu_item7" />
                        </ContextMenu>
                    </Button.ContextMenu>
                </Button>
                <TextBlock Text="Rotar:" DockPanel.Dock="Left" Margin="10, 0, 10, 0" Foreground="White"  VerticalAlignment="Center"/>

                
                <Grid Margin="10, 5, 10, 0" MinWidth="30">
                    <Slider x:Name="slider" 
                            Minimum="0" Maximum="359" 
                            Value="{Binding Rotation}"
                            TickFrequency="1" 
                            IsSnapToTickEnabled="True" 
                            Margin="-1,0,0.6,0"
                            Width="90"/>
                </Grid>

                <TextBox MinWidth="50" DockPanel.Dock="Left"
                         HorizontalAlignment="Left"  VerticalAlignment="Center"
                         Style="{DynamicResource formatotextbox1}" >
                    <TextBox.Text>
                        <Binding Path="Rotation" UpdateSourceTrigger="PropertyChanged">
                            <Binding.ValidationRules>
                                <valrules:RotationValidator/>
                            </Binding.ValidationRules>
                            
                        </Binding>
                        
                        
                    </TextBox.Text>
                    <Validation.ErrorTemplate>
                        <ControlTemplate>
                            <StackPanel>
                                <AdornedElementPlaceholder x:Name="textBox"/>
                                <Border BorderThickness="5" BorderBrush="#fd7200" Background="#fd7200" CornerRadius="8">
                                    <TextBlock Text="{Binding /ErrorContent}" Foreground="Black" Background="#fd7200" />
                                </Border>
                            </StackPanel>
                        </ControlTemplate>
                    </Validation.ErrorTemplate>
                </TextBox>

                <TextBlock Text="Traslación (X, Y):" DockPanel.Dock="Left" Margin="10, 0, 10, 0" Foreground="White"  VerticalAlignment="Center"/>

                <TextBox DockPanel.Dock="Left"
                         HorizontalAlignment="Left"  VerticalAlignment="Center"
                         MinWidth="50"
                         Style="{DynamicResource formatotextbox1}">
                    <TextBox.Text>
                        <Binding Path="Coordinate" UpdateSourceTrigger="PropertyChanged">
                            <Binding.ValidationRules>
                                <valrules:TranslationValidator/>
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                    <Validation.ErrorTemplate>
                        <ControlTemplate>
                            <StackPanel>
                                <AdornedElementPlaceholder x:Name="textBox"/>
                                <Border BorderThickness="5" BorderBrush="#fd7200" Background="#fd7200" CornerRadius="8">
                                    <TextBlock Text="{Binding /ErrorContent}" Foreground="Black" Background="#fd7200" />
                                </Border>
                            </StackPanel>
                        </ControlTemplate>
                    </Validation.ErrorTemplate>
                </TextBox>

                <Button Content="Puntos de Control" DockPanel.Dock="Right" 
                VerticalAlignment="Center"  HorizontalAlignment="Right"
                RenderTransformOrigin="0.5,0.5" UseLayoutRounding="False" Style="{DynamicResource Estiloboton}" 
                Foreground="White" Background="#2E99F7" BorderBrush="#2E99F7" Click="Button_Click"/>

                <Button Content="Invertir palabra" DockPanel.Dock="Right" Margin="10, 0, 10, 0"
                VerticalAlignment="Center"  HorizontalAlignment="Right"
                RenderTransformOrigin="0.5,0.5" UseLayoutRounding="False" Style="{DynamicResource Estiloboton}" 
                Foreground="White" Background="#2E99F7" BorderBrush="#2E99F7" Click="Button_Click_1"/>
            </DockPanel>

        </DockPanel>

        <DockPanel DockPanel.Dock="Top" Background="#04122e">
            <DockPanel DockPanel.Dock="Left"  Margin="20">
                <TextBlock Text="Input:" DockPanel.Dock="Top"
                           HorizontalAlignment="Left"
                           Foreground="White"/>

                <TextBox x:Name="TextCanvas" DockPanel.Dock="Top" Width="200" TextWrapping="Wrap" AcceptsReturn="True" KeyDown="TextCanvas_KeyDown" KeyUp="TextCanvas_KeyUp">
                    <TextBox.Text>
                        <Binding Path="Input" UpdateSourceTrigger="PropertyChanged">
                            <!--<Binding.ValidationRules>
                                <valrules:InputTextValidator/>
                            </Binding.ValidationRules>-->
                        </Binding>
                    </TextBox.Text>
                    <!--<Validation.ErrorTemplate>
                        <ControlTemplate>
                            <StackPanel>
                                <AdornedElementPlaceholder x:Name="textBox"/>
                                <Border BorderThickness="4" BorderBrush="#fd7200" Background="#fd7200" CornerRadius="4">
                                    <TextBlock Text="{Binding /ErrorContent}" Foreground="Black" Background="#fd7200"  Height="15" VerticalAlignment="Top" TextWrapping="Wrap" />
                                </Border>
                            </StackPanel>
                        </ControlTemplate>-->
                    <!--</Validation.ErrorTemplate>-->
                </TextBox>
            
            </DockPanel>
            <DockPanel DockPanel.Dock="Left" Margin="20">
                <TextBlock Text="Output:" DockPanel.Dock="Top"
                           HorizontalAlignment="Left"
                           Foreground="White"/>
                <local:CanvasView x:Name="canvas" DockPanel.Dock="Top" SizeChanged="canvas_SizeChanged"/>
            </DockPanel>

        </DockPanel>
    </DockPanel>
</UserControl>
